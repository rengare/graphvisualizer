#version 430
uint GRROUP_SIZE = 20;
layout (local_size_x = 20, local_size_y = 1, local_size_z = 1) in;


int currentEdgeIteration = 0;
float SPEED_DIVISOR = 800;
float AREA_MULTIPLICATOR = 10000;
float speed = 1;
float area = 1000;
float gravity = 10;

struct GraphicData
{
    vec3 position;
    vec4 color;
    float size;
    float dx;
    float dy;
    float dz;
};

struct Connections
{
    int from;
    int to;
};

layout (std430, binding = 0) buffer DataBuffer 
{
	GraphicData data[];
};

layout (std430, binding = 8) buffer DataConnections
{
	Connections connections[];
};

layout( location = 1 ) uniform int graphDataSize;
layout( location = 9 ) uniform int connectionSize;

void main(void)
{
    float maxDisplace = (sqrt(AREA_MULTIPLICATOR * area) / 10.0);
    float k = ((AREA_MULTIPLICATOR * area) / (1.0 + graphDataSize));

    uint index = gl_GlobalInvocationID.x;

    uint minsize = index * GRROUP_SIZE;
    uint maxSize = (index * GRROUP_SIZE) + GRROUP_SIZE;

    for(uint i = minsize; i < maxSize; i++ )
    {
        data[i].dx = 0;
        data[i].dy = 0;
        data[i].dz = 0;

        for (uint j = minsize; j < maxSize; j++)
        {
            if (i != j)
            {
                float xDist = data[i].position[0] - data[j].position[0];
                float yDist = data[i].position[1] - data[j].position[1];
                float zDist = data[i].position[2] - data[j].position[2];
                float dist = sqrt(xDist * xDist + yDist * yDist + zDist * zDist);
                float repulsive = (k * k) / dist;
                data[i].dx += xDist / dist * repulsive;
                data[i].dy += yDist / dist * repulsive;
                data[i].dz += zDist / dist * repulsive;
                
                
            }
        }
    }
}

// void App::Fruchterman_Reingold()
// {

//     auto edgeSize = fromToConnectionIndex.size();
//     for (int i = 0; i < edgeSize; i++)
//     {
//         auto source = (*nodesData)[fromToConnectionIndex[i].from];
//         auto target = (*nodesData)[fromToConnectionIndex[i].to];

//         float xDist = source.vertexPosition.x - target.vertexPosition.x;
//         float yDist = source.vertexPosition.y - target.vertexPosition.y;
//         float zDist = source.vertexPosition.z - target.vertexPosition.z;
//         float dist = std::sqrt(xDist * xDist + yDist * yDist + zDist * zDist);

//         if (dist > 0)
//         {
//             float atractive = (dist * dist) / k;
//             source.dx -= xDist / dist * atractive;
//             source.dy -= yDist / dist * atractive;
//             source.dz -= zDist / dist * atractive;

//             target.dx += xDist / dist * atractive;
//             target.dy += yDist / dist * atractive;
//             target.dz += zDist / dist * atractive;

//             (*nodesData)[fromToConnectionIndex[i].from] = source;
//             (*nodesData)[fromToConnectionIndex[i].to] = target;
//         }
//     }

//     for (int i = 0; i < nodeSize; i++)
//     {
//         auto pos = (*nodesData)[i];
//         float d = std::sqrt((pos.vertexPosition.x * pos.vertexPosition.x + pos.vertexPosition.y * pos.vertexPosition.y + pos.vertexPosition.z * pos.vertexPosition.z));
//         float gf = 0.01f * k * (float)gravity * d;

//         pos.dx -= gf * pos.vertexPosition.x / d;
//         pos.dy -= gf * pos.vertexPosition.y / d;
//         pos.dz -= gf * pos.vertexPosition.z / d;

//         pos.dx += speed;
//         pos.dy += speed;
//         pos.dz += speed;

//         d = std::sqrt((pos.dx * pos.dx + pos.dy * pos.dy + pos.dz * pos.dz));

//         if (d > 0)
//         {

//             #ifdef _WIN32
//                 float limitedDist = min(maxDisplace * ((float)speed / SPEED_DIVISOR), d);
//             #else
//                 float limitedDist = std::min(maxDisplace * ((float)speed / SPEED_DIVISOR), d);
//             #endif
                            
//             pos.vertexPosition.x = pos.vertexPosition.x + pos.dx / d * limitedDist;
//             pos.vertexPosition.y = pos.vertexPosition.y + pos.dy / d * limitedDist;
//             if (config.graphType3d)
//             {
//                 pos.vertexPosition.z = pos.vertexPosition.z + pos.dz / d * limitedDist;
//             }
//         }
//         (*nodesData)[i] = pos;
//     }

//     // edgeSize = (*connections).size();
//     for (int i = 0; i < fromToConnectionIndex.size(); i++)
//     {
//         auto source = (*nodesData)[fromToConnectionIndex[i].from];
//         auto target = (*nodesData)[fromToConnectionIndex[i].to];

//         (*edgesData).push_back(source);
//         (*edgesData).push_back(target);
//     }
//     nodes.AddInstanced(nodesData);
//     edges.AddInstanced(edgesData);
// }