#version 430
#define GROUPSIZE 256

layout (local_size_x = GROUPSIZE) in;

float AREA_MULTIPLICATOR = 500;

layout( location = 11 ) uniform float speed;
layout( location = 12 ) uniform float area;
layout( location = 13 ) uniform float gravity;
layout( location = 17 ) uniform int graphType3d;

struct GraphicData
{
    vec4 position;
    vec4 color;
    float size;
    float dx;
    float dy;
    float dz;
};

struct Connections
{
    int from;
    int to;
};

layout (std430, binding = 0) buffer DataBuffer 
{
	GraphicData data[];
};

layout (std430, binding = 8) buffer DataConnections
{
	Connections connections[];
};

layout( location = 1 ) uniform int graphDataSize;

vec3 distance(vec4 currentPosition, vec4 cachedPosition){
    return currentPosition.xyz - cachedPosition.xyz;
}

vec3 repulsion(vec4 currentPosition, vec4 cachedPosition, float k){
    vec3 dist = vec3(0);
    float distSqrt = 0;
    if(graphType3d == 1.0){
        dist = currentPosition.xyz - cachedPosition.xyz;
        distSqrt = sqrt(pow(dist.x, 2) + pow(dist.y, 2) + pow(dist.z, 2));
    }else{
        dist = vec3(currentPosition.xy,0) - vec3(cachedPosition.xy,0);        
        distSqrt = sqrt(pow(dist.x, 2) + pow(dist.y, 2));        
    }
    if(distSqrt > 0){
        float repulsive = k / distSqrt;
        return (dist / distSqrt * repulsive);
    }else{
        return vec3(0);
    }
    
}

shared vec4 cache[gl_WorkGroupSize.x];

void main(void)
{
    // float k;
    // uint globalIndex = gl_GlobalInvocationID.x;
    
    // uint N = gl_NumWorkGroups.x*gl_WorkGroupSize.x;
    
    // if(globalIndex > graphDataSize) return;

    // GraphicData currentModel = data[globalIndex];
    // currentModel.dx = 0;
    // currentModel.dy = 0;
    // currentModel.dz = 0;

    // k = ((AREA_MULTIPLICATOR * area) / (1.0 + graphDataSize));

    // if(graphType3d == 1 && currentModel.position.z == 0.0){
    //     currentModel.position.z = 1;
    // }

    // vec3 t = vec3(0.0);
    // for (uint j = 0; j < gl_NumWorkGroups.x * gl_WorkGroupSize.x; j += gl_WorkGroupSize.x)
    // {
    //     if(gl_LocalInvocationIndex + j >= graphDataSize) break;

    //     cache[gl_LocalInvocationIndex] = data[gl_LocalInvocationIndex + j].position;
        
    //     for(uint i = 0; i< gl_WorkGroupSize.x; i++){
    //         t += repulsion(currentModel.position, cache[i], k*k);   

    //     }
    // }
    
    // currentModel.dx = t.x;
    // currentModel.dy = t.y;
    // currentModel.dz = t.z;
    // data[globalIndex] = currentModel;
}