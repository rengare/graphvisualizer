#version 430
layout (local_size_x = 10, local_size_y = 1, local_size_z = 1) in;

float SPEED_DIVISOR = 800.0;
float AREA_MULTIPLICATOR = 1000.0;

layout( location = 11 ) uniform float speed = 100.0;
layout( location = 12 ) uniform float area = 100.0;
layout( location = 13 ) uniform float gravity = 10.0;

struct GraphicData
{
    vec4 position;
    vec4 color;
    float size;
    float dx;
    float dy;
    float dz;
};

struct Connections
{
    int from;
    int to;
};

layout (std430, binding = 0) buffer DataBuffer 
{
	GraphicData data[];
};

layout (std430, binding = 8) buffer DataConnections
{
	Connections connections[];
};

// layout (std430, binding = 15) buffer RepulsiveBuffer 
// {
// 	vec4 repulsiveDistances[];
// };

// shared vec4 localPositions[ gl_WorkGroupSize.x ];

layout( location = 1 ) uniform int graphDataSize;
layout( location = 9 ) uniform int connectionSize;

void syncronize()
{
	memoryBarrierShared();
	barrier();
}

void main(void)
{
    uint globalIndex = gl_GlobalInvocationID.x;
    if(globalIndex > graphDataSize) return;
    
    float maxDisplace = (sqrt(AREA_MULTIPLICATOR * area) / 10.0);
    float k = ((AREA_MULTIPLICATOR * area) / (1.0 + graphDataSize));
    k = k * k;

    GraphicData currentModel = data[globalIndex];

    currentModel.dx = 0;
    currentModel.dy = 0;
    currentModel.dz = 0;


    for (uint j = 0; j < graphDataSize; j++)
    {
        GraphicData model = data[j];
        vec4 dist = currentModel.position - model.position;
        float distSqrt = sqrt(dist.x * dist.x + dist.y * dist.y + dist.z * dist.z);
        float repulsive = k / distSqrt;

        vec4 calculateddistances = vec4(dist.x, dist.y, dist.z, 0) ;
        
        calculateddistances = calculateddistances / distSqrt;
        calculateddistances = calculateddistances * repulsive;

        if (globalIndex != j)
        {
            currentModel.dx += calculateddistances.x; 
            currentModel.dy += calculateddistances.y;
            currentModel.dz += calculateddistances.z;
        }
        }

    data[globalIndex] = currentModel;
}