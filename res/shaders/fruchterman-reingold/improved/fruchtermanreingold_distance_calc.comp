#version 430
#define GROUPSIZE 100

layout (local_size_x = GROUPSIZE) in;

float SPEED_DIVISOR = 800.0;
float AREA_MULTIPLICATOR = 1000.0;

layout( location = 12 ) uniform float area = 100.0;

struct GraphicData
{
    vec4 position;
    vec4 color;
    float size;
    float dx;
    float dy;
    float dz;
};

struct Connections
{
    int from;
    int to;
};

layout (std430, binding = 0) buffer DataBuffer 
{
	GraphicData data[];
};

layout (std430, binding = 8) buffer DataConnections
{
	Connections connections[];
};

layout( location = 1 ) uniform int graphDataSize;

void synchronize()
{
	memoryBarrierShared();
	barrier();
}
float k;

vec3 interaction(vec4 currentPosition, vec4 cachedPosition){
    vec3 dist = currentPosition.xyz - cachedPosition.xyz;
    float distSqrt = sqrt(dist.x * dist.x + dist.y * dist.y + dist.z * dist.z);
    float repulsive = k / distSqrt;
    
    dist = dist / distSqrt * repulsive;

    return dist;
}

shared vec4 cache[GROUPSIZE];

void main(void)
{
    uint globalIndex = gl_GlobalInvocationID.x;
    
    uint N = gl_NumWorkGroups.x*gl_WorkGroupSize.x;
    
    if(globalIndex > graphDataSize) return;

    vec4 currentModelPosition = data[globalIndex].position;
    
    k = ((AREA_MULTIPLICATOR * area) / (1.0 + graphDataSize));
    k = k * k;

    vec3 t = vec3(0.0);
    // uint dLength = 0;
    // for (uint i = 0; i < graphDataSize; i += GROUPSIZE)
    // {
    //     uint dLength = gl_LocalInvocationID.x;

    //     cache[dLength] = vec4(data[i + dLength].position.xyz,1.0);

    //     groupMemoryBarrier();
    //     for (int j = 0; j < GROUPSIZE; ++j)
    //     {
    //         t += interaction(currentModelPosition, cache[GROUPSIZE-1]);   
    //     }
    // }

    float maxDist = 0.00001;
    for (uint j = 0; j < graphDataSize; j++)
    {
        
        if (globalIndex != j)
        {
            t += interaction(currentModelPosition, data[j].position);   
        }
    }
    
    data[globalIndex].dx = t.x;
    data[globalIndex].dy = t.y;
    data[globalIndex].dz = t.z;
    // data[globalIndex].position += vec4(1,0,0,0);
}