#version 430
#define GROUPSIZE 256

layout (local_size_x = GROUPSIZE) in;

float AREA_MULTIPLICATOR = 500;

layout( location = 11 ) uniform float speed;
layout( location = 12 ) uniform float area;
layout( location = 13 ) uniform float gravity;
layout( location = 17 ) uniform int graphType3d;

struct GraphicData
{
    vec4 position;
    vec4 color;
    float size;
    float dx;
    float dy;
    float dz;
};

struct Connections
{
    int from;
    int to;
};

layout (std430, binding = 0) buffer DataBuffer 
{
	GraphicData data[];
};

layout (std430, binding = 8) buffer DataConnections
{
	Connections connections[];
};

layout( location = 1 ) uniform int graphDataSize;

vec3 distance(vec4 currentPosition, vec4 cachedPosition){
    return currentPosition.xyz - cachedPosition.xyz;
}

vec3 repulsion(vec4 currentPosition, vec4 cachedPosition, float k){
    vec3 dist = vec3(0);
    float distSqrt = 0;
    if(graphType3d == 1.0){
        dist = currentPosition.xyz - cachedPosition.xyz;
        distSqrt = sqrt(dist.x * dist.x + dist.y * dist.y + dist.z * dist.z);
    }else{
        dist = vec3(currentPosition.xy,0) - vec3(cachedPosition.xy,0);        
        distSqrt = sqrt(dist.x * dist.x + dist.y * dist.y);        
    }
    if(distSqrt > 0){
        float repulsive = k / distSqrt;
        return (dist / distSqrt * repulsive);
    }else{
        return vec3(0);
    }
    
}

void main(void)
{
    float k;
    uint globalIndex = gl_GlobalInvocationID.x;
    
    uint N = gl_NumWorkGroups.x*gl_WorkGroupSize.x;
    
    if(globalIndex > graphDataSize) return;

    GraphicData currentModel = data[globalIndex];
    currentModel.dx = 0;
    currentModel.dy = 0;
    currentModel.dz = 0;

    k = ((AREA_MULTIPLICATOR * area) / (1.0 + graphDataSize));

    vec3 t = vec3(0.0);
    for (uint j = 0; j < graphDataSize; j++)
    {
        
        if (globalIndex != j)
        {
            t += repulsion(currentModel.position, data[j].position, k*k);   
        }
    }
    
    currentModel.dx = t.x;
    currentModel.dy = t.y;
    currentModel.dz = t.z;
    data[globalIndex] = currentModel;
}