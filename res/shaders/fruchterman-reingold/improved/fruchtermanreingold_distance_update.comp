#version 430
layout (local_size_x = 10, local_size_y = 1, local_size_z = 1) in;

float SPEED_DIVISOR = 800.0;
float AREA_MULTIPLICATOR = 1000.0;

layout( location = 11 ) uniform float speed = 100.0;
layout( location = 12 ) uniform float area = 100.0;
layout( location = 13 ) uniform float gravity = 10.0;

struct GraphicData
{
    vec4 position;
    vec4 color;
    float size;
    float dx;
    float dy;
    float dz;
};

struct Connections
{
    int from;
    int to;
};

layout (std430, binding = 0) buffer DataBuffer 
{
	GraphicData data[];
};

layout (std430, binding = 8) buffer DataConnections
{
	Connections connections[];
};

layout (std430, binding = 11) buffer RepulsiveBuffer 
{
	vec4 repulsiveDistances[];
};

layout( location = 1 ) uniform int graphDataSize;
layout( location = 9 ) uniform int connectionSize;

// shared vec4 localPositions[ gl_WorkGroupSize.x ];

void syncronize()
{
	memoryBarrierShared();
	barrier();
}

void main(void)
{
    // float maxDisplace = (sqrt(AREA_MULTIPLICATOR * area) / 10.0);
    // float k = ((AREA_MULTIPLICATOR * area) / (1.0 + graphDataSize));

    // uint globalIndex = gl_GlobalInvocationID.x;
    // uint localIndex =  gl_LocalInvocationID.x;
    
    // if(globalIndex > graphDataSize) return;

    // data[globalIndex].dx = 0;
    // data[globalIndex].dy = 0;
    // data[globalIndex].dz = 0;
    
    // data[globalIndex].dx += repulsiveDistances[globalIndex].x;
    // data[globalIndex].dy += repulsiveDistances[globalIndex].y;
    // data[globalIndex].dz += repulsiveDistances[globalIndex].z;
}