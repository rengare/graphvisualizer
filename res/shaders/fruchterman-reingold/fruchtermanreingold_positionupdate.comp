#version 430
layout (local_size_x = 256) in;

float SPEED_DIVISOR = 400.0;
float AREA_MULTIPLICATOR = 500;

layout( location = 11 ) uniform float speed;
layout( location = 12 ) uniform float area;
layout( location = 13 ) uniform float gravity;
layout( location = 17 ) uniform int graphType3d;

struct GraphicData
{
    vec4 position;
    vec4 color;
    float size;
    float dx;
    float dy;
    float dz;
};

struct Connections
{
    int from;
    int to;
};

layout (std430, binding = 0) buffer DataBuffer 
{
	GraphicData data[];
};

layout (std430, binding = 8) buffer DataConnections
{
	Connections connections[];
};

layout( location = 1 ) uniform int graphDataSize;
layout( location = 9 ) uniform int connectionSize;

shared vec4 localPositions[ gl_WorkGroupSize.x ];

float distSqrt(vec4 node){
    if(graphType3d == 1){
        return sqrt((pow(node.x, 2) + pow(node.y, 2) + pow(node.z, 2)));
    }else{
        return sqrt((pow(node.x, 2) + pow(node.y, 2)));
    }
}

vec4 positionUpdate(GraphicData model, float d, float limitedDist){
    vec4 position = vec4(0);

    position.x = model.position.x + model.dx / d * limitedDist;
    position.y = model.position.y + model.dy / d * limitedDist;
    if(graphType3d == 1){
        position.z = model.position.z + model.dz / d * limitedDist;
    }else{
        position.z = 0;
    }

    return position;
}

void main(void)
{

    uint globalIndex = gl_GlobalInvocationID.x;
    uint localIndex =  gl_LocalInvocationID.x;
    
    if(globalIndex > graphDataSize) return;

    GraphicData node = data[globalIndex];
    float maxDisplace = (sqrt(AREA_MULTIPLICATOR * area) / 10.0);
    float k = ((AREA_MULTIPLICATOR * area) / (1.0 + graphDataSize));
    float d = distSqrt(node.position);
    float gf = 0.01 * k * gravity * d;

    node.dx -= gf * node.position.x / d;
    node.dy -= gf * node.position.y / d;
    node.dz -= gf * node.position.z / d;
    
    node.dx *= speed / SPEED_DIVISOR;
    node.dy *= speed / SPEED_DIVISOR;
    node.dz *= speed / SPEED_DIVISOR;
    
    d = distSqrt(vec4(node.dx, node.dy, node.dz, 0));
    
    if (d > 0)
    {
        float limitedDist = min(maxDisplace * (speed / SPEED_DIVISOR), d);
        node.position = positionUpdate(node, d, limitedDist);
    }

    data[globalIndex] = node;
}