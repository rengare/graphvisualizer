#version 430
layout (local_size_x = 256) in;

float SPEED_DIVISOR = 800.0;
float AREA_MULTIPLICATOR = 100;

layout( location = 11 ) uniform float speed;
layout( location = 12 ) uniform float area;
layout( location = 13 ) uniform float gravity;
layout( location = 17 ) uniform int graphType3d;

struct GraphicData
{
    vec4 position;
    vec4 color;
    float size;
    float dx;
    float dy;
    float dz;
};

struct Connections
{
    int from;
    int to;
};

layout (std430, binding = 0) buffer DataBuffer 
{
	GraphicData data[];
};

layout (std430, binding = 8) buffer DataConnections
{
	Connections connections[];
};

layout( location = 1 ) uniform int graphDataSize;
layout( location = 9 ) uniform int connectionSize;

shared vec4 localPositions[ gl_WorkGroupSize.x ];

float distSqrt(vec4 pos){
    if(graphType3d == 1){
        return sqrt((pos.x * pos.x + pos.y * pos.y + pos.z * pos.z));
    }else{
        return sqrt((pos.x * pos.x + pos.y * pos.y));
    }
}

vec4 positionUpdate(GraphicData model, float d, float limitedDist){
    vec4 position = vec4(0);

        position.x = model.position.x + model.dx / d * limitedDist;
        position.y = model.position.y + model.dy / d * limitedDist;
        if(graphType3d == 1){
            position.z = model.position.z + model.dz / d * limitedDist;
        }else{
            position.z = 0;
        }

    return position;
}

void main(void)
{
    float maxDisplace = (sqrt(AREA_MULTIPLICATOR * area) / 10.0);
    float k = ((AREA_MULTIPLICATOR * area) / (1.0 + graphDataSize));

    uint globalIndex = gl_GlobalInvocationID.x;
    uint localIndex =  gl_LocalInvocationID.x;
    
    if(globalIndex > graphDataSize) return;

    GraphicData pos = data[globalIndex];


    float d = distSqrt(pos.position);
        
    float gf = 0.01 * k * gravity * d;

    pos.dx -= gf * pos.position[0] / d;
    pos.dx += speed;
    
    pos.dy -= gf * pos.position[1] / d;
    pos.dy += speed;
    
    pos.dz -= gf * pos.position[2] / d;
    pos.dz += speed;

    d = distSqrt(vec4(pos.dx, pos.dy, pos.dz, 0));
    
    if (d > 0)
    {
        float limitedDist = min(maxDisplace * (speed / SPEED_DIVISOR), d);
        pos.position = positionUpdate(pos, d, limitedDist);         
    }

    data[globalIndex] = pos;
}