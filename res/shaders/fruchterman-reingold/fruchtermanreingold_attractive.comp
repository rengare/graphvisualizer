#version 430
layout (local_size_x = 256) in;

float SPEED_DIVISOR = 400.0;
float AREA_MULTIPLICATOR = 500;

layout( location = 11 ) uniform float speed;
layout( location = 12 ) uniform float area;
layout( location = 13 ) uniform float gravity;
layout( location = 17 ) uniform int graphType3d;

struct GraphicData
{
    vec4 position;
    vec4 color;
    float size;
    float dx;
    float dy;
    float dz;
};

struct Connections
{
    int from;
    int to;
};

layout (std430, binding = 0) buffer DataBuffer 
{
	GraphicData data[];
};

layout (std430, binding = 8) buffer DataConnections
{
	Connections connections[];
};

layout( location = 1 ) uniform int graphDataSize;
layout( location = 9 ) uniform int connectionSize;

float distSqrt(vec4 pos){
    if(graphType3d == 1){
        return sqrt((pow(pos.x, 2) + pow(pos.y, 2) + pow(pos.z, 2)));
    }else{
        return sqrt((pow(pos.x, 2) + pow(pos.y, 2)));
    }
}

void main(void)
{
    float k = ((AREA_MULTIPLICATOR * area) / (1.0 + graphDataSize));

    uint globalIndex = gl_GlobalInvocationID.x;
    
    if(globalIndex > connectionSize) return;

    GraphicData source = data[connections[globalIndex].from];
    GraphicData target = data[connections[globalIndex].to];

    float xDist = source.position.x - target.position.x;
    float yDist = source.position.y - target.position.y;
    float zDist = source.position.z - target.position.z;

    float dist = distSqrt(vec4(xDist, yDist, zDist, 0));

    if (dist > 0)
    {
        float atractive = (dist * dist) / k;
        source.dx -= xDist / dist * atractive;
        source.dy -= yDist / dist * atractive;

        target.dx += xDist / dist * atractive;
        target.dy += yDist / dist * atractive;
        
        if(graphType3d == 1){
            source.dz -= zDist / dist * atractive;
            target.dz += zDist / dist * atractive;
        }

        data[connections[globalIndex].from] = source;
        data[connections[globalIndex].to] = target;
    }
}