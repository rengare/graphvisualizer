#version 430
float LIMIT_MULTIPLICATOR = 100.0;

layout (local_size_x = 10, local_size_y = 1, local_size_z = 1) in;

layout( location = 11 ) uniform float limit = 100.0;


struct GraphicData
{
    vec4 position;
    vec4 color;
    float size;
    float dx;
    float dy;
    float dz;
};

struct Connections
{
    int from;
    int to;
};

layout (std430, binding = 0) buffer DataBuffer 
{
	GraphicData data[];
};

layout (std430, binding = 8) buffer DataConnections
{
	Connections connections[];
};

layout( location = 1 ) uniform int graphDataSize;
layout( location = 9 ) uniform int connectionSize;

 float rand(vec3 co)
 {
     if(co.x == 0.0) co.x = 10.0; 
     if(co.y == 0.0) co.y = 10.0; 
     if(co.z == 0.0) co.z = 10.0; 

     return fract(sin( dot(co.xyz ,vec3(12.9898,78.233,45.5432) )) * 43758.5453);
 }

float multiplicator = 1.0;

void setPosition(uint globalIndex, float multiplicator){
    data[globalIndex].position[0] = rand(data[globalIndex].position.xyz) * multiplicator * LIMIT_MULTIPLICATOR;
    data[globalIndex].position[1] = rand(data[globalIndex].position.xyz) * multiplicator * LIMIT_MULTIPLICATOR;
    data[globalIndex].position[2] = rand(data[globalIndex].position.xyz) * multiplicator * LIMIT_MULTIPLICATOR;
}

void main(void)
{

    uint globalIndex = gl_GlobalInvocationID.x;
    
    if(limit <= 0.0){
        multiplicator = 1.0;
    } else{
        multiplicator = limit;
    }

    setPosition(globalIndex, multiplicator);
}